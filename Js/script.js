// // Elementos clave
// const orientationWarning = document.getElementById('orientation-warning');
// const orientationVideo = document.getElementById('orientacionVideo');
// const body = document.body;
// const musica = document.getElementById('bg-music');

// let musicaPausadaPorOrientacion = false;

// // Funci√≥n para pausar todo al estar en vertical
// function pausarTodoPorOrientacion() {
//   orientationWarning.style.display = 'flex';
//   body.classList.add('pausar-animaciones');

//   if (musica && !musica.paused) {
//     musica.pause();
//     musicaPausadaPorOrientacion = true;
//   }

//   document.body.style.pointerEvents = 'none'; // Bloquear interacci√≥n
// }

// // Funci√≥n para reanudar al volver a horizontal
// function reanudarTodoPorOrientacion() {
//   orientationWarning.style.display = 'none';
//   body.classList.remove('pausar-animaciones');

//   document.body.style.pointerEvents = 'auto'; // Restaurar interacci√≥n

//   if (musicaPausadaPorOrientacion && musica) {
//     try {
//       musica.play();
//     } catch (e) {
//       // Algunas pol√≠ticas de autoplay podr√≠an bloquearlo
//       console.warn("La m√∫sica no se pudo reproducir autom√°ticamente:", e);
//     }
//     musicaPausadaPorOrientacion = false;
//   }
// }

// // Verifica orientaci√≥n actual y aplica l√≥gica
// function verificarOrientacion() {
//   const esVertical = window.innerHeight > window.innerWidth;

//   if (esVertical) {
//     pausarTodoPorOrientacion();
//   } else {
//     reanudarTodoPorOrientacion();
//   }
// }

// // Detectar cambios de orientaci√≥n
// window.addEventListener("load", verificarOrientacion);
// window.addEventListener("resize", verificarOrientacion);
// window.addEventListener("orientationchange", verificarOrientacion);

///////////////////////////////////Abajo esta lo original//////////////////////////////////////////////////////////////////////

// Control de la experiencia principal
let mainExperienceStarted = false;

function startMainExperience() {
  if (mainExperienceStarted) return;
  mainExperienceStarted = true;

  const container = document.getElementById('tree-container');

  // Cargar el SVG desde la carpeta externa "Img/treelove-new"
    // Cargar el SVG desde la carpeta externa "Img/treelove-new"
fetch('Img/treelove-new.svg')
  .then(response => response.text()) // Convertir la respuesta en texto (el contenido del SVG)
  .then(svgText => {
    console.log(svgText); // Verifica si el SVG se est√° cargando correctamente
    const container = document.getElementById('tree-container'); // Obtener el contenedor
    container.innerHTML = svgText; // Insertar el SVG cargado din√°micamente en el contenedor

    const svg = container.querySelector('svg'); // Buscar el elemento <svg>
    if (!svg) return; // Si no hay un SVG, no hacer nada

    // Animaci√≥n de "dibujo" para todos los paths
    const allPaths = Array.from(svg.querySelectorAll('path')); // Obtener todos los paths del SVG
    allPaths.forEach(path => {
      path.style.stroke = '#222';
      path.style.strokeWidth = '2.5';
      path.style.fillOpacity = '0';
      const length = path.getTotalLength();
      path.style.strokeDasharray = length;
      path.style.strokeDashoffset = length;
      path.style.transition = 'none';
    });

    // Forzar reflow y luego animar
    setTimeout(() => {
      allPaths.forEach((path, i) => {
        path.style.transition = `stroke-dashoffset 1.2s cubic-bezier(.77,0,.18,1) ${i * 0.08}s, fill-opacity 0.5s ${0.9 + i * 0.08}s`;
        path.style.strokeDashoffset = 0;
        setTimeout(() => {
          path.style.fillOpacity = '1';
          path.style.stroke = '';
          path.style.strokeWidth = '';
        }, 1200 + i * 80);
      });

      // Despu√©s de la animaci√≥n de dibujo, mueve y agranda el SVG
      const totalDuration = 1200 + (allPaths.length - 1) * 80 + 500;
      setTimeout(() => {
        svg.classList.add('move-and-scale');

        // Mostrar texto con efecto typing
        setTimeout(() => {
          showDedicationText(); // Funci√≥n de m√°quina de escribir para dedicatoria
          // Mostrar p√©talos flotando
          startFloatingObjects(); // Funci√≥n para los objetos flotantes
          // Mostrar cuenta regresiva
          showCountdown(); // Funci√≥n para la cuenta regresiva
        }, 1200); // Tiempo para agrandar el SVG
      }, totalDuration);
    }, 50);

    // Selecciona los corazones (formas rojas)
    const heartPaths = allPaths.filter(el => {
      const style = el.getAttribute('style') || '';
      return style.includes('#FC6F58') || style.includes('#C1321F');
    });
    heartPaths.forEach(path => {
      path.classList.add('animated-heart');
    });
  })
  .catch(error => {
    console.error("Error cargando el SVG:", error);
  });


  // No hay cambios en el resto del flujo. Sigue igual:
  // Secci√≥n de interacciones, petalos, cuenta regresiva, etc.
}

function showDedicationText() {
  // Funci√≥n para simular el efecto m√°quina de escribir
  const dedicationText = "Gracias por ser parte de este momento tan especial.";
  const dedicationElement = document.getElementById('dedication-text');
  let index = 0;

  function type() {
    if (index < dedicationText.length) {
      dedicationElement.innerHTML += dedicationText.charAt(index);
      index++;
      setTimeout(type, 100);
    }
  }

  type();
}

function startFloatingObjects() {
  // Funci√≥n para simular los p√©talos flotando o cualquier objeto flotante
  const petal = document.createElement('div');
  petal.classList.add('floating-object');
  document.body.appendChild(petal);

  // Simular movimiento de los objetos flotantes (p√©talos, etc.)
  setInterval(() => {
    petal.style.transform = `translate(${Math.random() * window.innerWidth}px, ${Math.random() * window.innerHeight}px)`;
  }, 2000);
}

function showCountdown() {
  // Funci√≥n para mostrar la cuenta regresiva
  let countdown = 10;
  const countdownElement = document.getElementById('countdown');
  countdownElement.innerHTML = countdown;

  const countdownInterval = setInterval(() => {
    countdown--;
    countdownElement.innerHTML = countdown;
    if (countdown <= 0) {
      clearInterval(countdownInterval);
      countdownElement.innerHTML = '¬°Feliz d√≠a!';
    }
  }, 1000);
}

// Iniciar la experiencia al hacer clic en la pantalla de inicio
document.addEventListener('DOMContentLoaded', () => {
  const startScreen = document.getElementById('start-screen');
  const mainContent = document.getElementById('main-content');

  function initExperience() {
    if (startScreen) startScreen.style.display = 'none';
    if (mainContent) mainContent.style.display = 'block';
    
    startMainExperience(); 
    
    // Esta llamada asegura que la m√∫sica intente reproducirse justo despu√©s de que se descarte la pantalla de inicio.
    // playBackgroundMusic tiene su propia bandera 'musicInitialized'.
    playBackgroundMusic(); 
  }

  if (startScreen) {
    startScreen.addEventListener('click', initExperience, { once: true });
    startScreen.addEventListener('touchstart', initExperience, { once: true, passive: true });
  } else {
    // Fallback si no se encuentra start-screen
    initExperience();
  }
});

// Efecto m√°quina de escribir para el texto de dedicatoria (seguidores)
function showDedicationText() {
  const dedicationText = document.getElementById('dedication-text');
  let text = "¬°Gracias por ser parte de esta experiencia!";
  let i = 0;

  function typeWriter() {
    if (i < text.length) {
      dedicationText.innerHTML += text.charAt(i);
      i++;
      setTimeout(typeWriter, 100);
    }
  }

  typeWriter();
}

// Funciones adicionales de animaci√≥n
function startFloatingObjects() {
  // Aqu√≠ va el c√≥digo para los objetos flotantes (pueden ser hojas o part√≠culas)
  console.log("Los objetos est√°n flotando.");
}

function showCountdown() {
  // Aqu√≠ va el c√≥digo para mostrar la cuenta regresiva
  const countdownElement = document.getElementById('countdown');
  let count = 5;
  countdownElement.innerHTML = count;
  
  const interval = setInterval(() => {
    count--;
    countdownElement.innerHTML = count;
    if (count === 0) {
      clearInterval(interval);
      countdownElement.innerHTML = "¬°Listo!";
    }
  }, 1000);
}

function playBackgroundMusic() {
  const audio = new Audio('path_to_your_background_music.mp3');
  audio.loop = true;
  audio.play();
  console.log("La m√∫sica de fondo est√° sonando.");
}

// Funci√≥n para obtener par√°metros de la URL (si los necesitas)
function getURLParam(name) {
  const url = new URL(window.location.href);
  return url.searchParams.get(name);
}

// Efecto m√°quina de escribir para el texto de dedicatoria (seguidores)
function getURLParam(name) {
  const url = new URL(window.location.href);
  return url.searchParams.get(name);
}

function showDedicationText() { 
  let text = getURLParam('text');
  
  if (!text) {
    // Ahora agregamos la propiedad data-emoji para crear el duplicado
    text = `<span class="red-text">Para:</span><span class="emoji-border" data-emoji="ü©µ">ü©µ</span><span class="emoji-border" data-emoji="üòç">üòç</span><span class="texto-resaltado">Mi Amorcito Lindo</span><span class="emoji-border" data-emoji="üòò">üòò</span><span class="emoji-border" data-emoji="ü§ç">ü§ç</span>\n
    No hay distancia que nos separe, ni reloj que el fin marque;

    mi amor por ti sigue intacto, aunque en silencio yo me encuentre aqu√≠.
    
    Te amo en cada rinc√≥n del d√≠a, en cada paso, en cada instante,
    
    aunque tus palabras me eviten, aunque tu mirada se haga distante.


    
    Me duele el alma verte distante,
    
    como si no importara el amor que por ti arde,
    
    y aunque mis palabras se ahogan en el aire,
    
    mi coraz√≥n no deja de llamarte.


    
    No recibir un "hola", ni saber de ti,
    
    me hace sentir vac√≠o, me duele muy dentro‚Ä¶ ¬°S√ç, AQU√ç!üëâüèºüíî
    
    Pero, aunque el silencio me consume y la ausencia me reclama,
    
    mi amor por ti no decae; este amor nunca se acaba.

    Porque en mi mente sigues presente,
    
    aunque a veces no lo demuestre,
    
    yo te sigo eligiendo, aun en la agon√≠a de cada palpitar,
    
    pues mi amor no pierde la calma, no deja de luchar.



    Quiz√° no entiendas lo que me duele,
    
    quiz√° no sepas que en mi alma duele el olvido,
    
    pero en mi coraz√≥n sigues siendo mi todo,
    
    y mi amor por ti nunca ser√° un olvido..`;
  } else {
    text = decodeURIComponent(text).replace(/\\n/g, '\n');
  }
/////TEXTO PRIMARIO
// No hay distancia que me aparte,
//         ni reloj que me limite;
//         te amo en cada instante,
//         aunque el abrazo se evite.

//         Y aunque me duela y se me parta el alma,
//         porque me tratas como si no te importara,
//         no recibo de ti un hola, ni un como estas,
//         el no poderte hablar me lastima,
//         me hace sentir desmayar y querer renunciar,
//         pero mi amor no pierde la calma,
//         ni deja de luchar m√°s.

//         Porque sigues en mi mente,
//         aunque a veces no lo ves,
//         yo te elijo, fiel y fuerte,
//         una y otra y otra vez.
  const container = document.getElementById('dedication-text');
  container.classList.add('typing');
  container.setAttribute('data-text', text);  // Asignamos el texto al atributo data-text
  let i = 0;

  function type() {
    if (i <= text.length) {
      container.innerHTML = text.slice(0, i); // Usamos innerHTML para procesar el HTML
      i++;
      setTimeout(type, text[i - 2] === '\n' ? 350 : 45);
    } else {
      // Al terminar el typing, mostrar la firma animada
      setTimeout(showSignature, 600);
    }
  }

  type();
}

// Firma manuscrita animada
// Firma manuscrita animada
function showSignature() {
  // Cambia para buscar la firma dentro del contenedor de dedicatoria
  const dedication = document.getElementById('dedication-text');
  let signature = dedication.querySelector('#signature');
  if (!signature) {
    signature = document.createElement('div');
    signature.id = 'signature';
    signature.className = 'signature';
    dedication.appendChild(signature);
  }

  let firma = getURLParam('firma');
  const defaultText = "Con much√≠simo\nc√≥digo y amor"; // Cambi√© esto a a√±adir un salto de l√≠nea
  const defaultSignature = "De: Tu √Ångel"; // Cambi√© esto a "De: Tu √Ångel" como ejemplo

  // Crea los elementos que se mostrar√°n en la firma
  const fullSignature = firma ? decodeURIComponent(firma) : `${defaultText}\n${defaultSignature}`;

  // Dividir el texto en dos partes: el mensaje de amor y la firma
  const parts = fullSignature.split("\n");

  // Limpiar el contenido anterior
  signature.innerHTML = '';

  // Crear el primer span para el texto de "Con much√≠simo" y "c√≥digo y amor"
  const loveAndCodePart = document.createElement('span');
  loveAndCodePart.innerHTML = parts[0] + '<br>' + parts[1]; // A√±adir salto de l√≠nea entre "Con much√≠simo" y "c√≥digo y amor"
  loveAndCodePart.classList.add('love-and-code'); // A√±adir la clase para estilos personalizados

  // Crear el segundo span para el texto "De:" (usando la clase .red-text-de)
  const dePart = document.createElement('span');
  dePart.textContent = parts[2].split(":")[0] + ":"; // El texto "De:"
  dePart.classList.add('red-text-de'); // Usamos la clase 'red-text-de'

  // Crear el tercer span para el nombre "Tu √Ångel" (usando la clase .signature-name)
  const namePart = document.createElement('span');
  namePart.textContent = parts[2].split(":")[1]; // El nombre de la firma "Tu √Ångel"
  namePart.classList.add('signature-name'); // Usamos la clase 'signature-name'

  // A√±adir los spans a la firma
  signature.appendChild(loveAndCodePart); // A√±adir el texto "Con much√≠simo c√≥digo y amor" con salto de l√≠nea
  signature.appendChild(document.createElement('br')); // Salto de l√≠nea
  signature.appendChild(dePart); // A√±adir "De:"
  signature.appendChild(namePart); // A√±adir el nombre "Tu √Ångel"

  // A√±adir la clase visible
  signature.classList.add('visible');

  // Espacio de 100px debajo de la firma (agregado por JS)
  signature.style.marginBottom = "160px";
}




// Controlador de objetos flotantes
function startFloatingObjects() {
  const container = document.getElementById('floating-objects');
  let count = 0;
  function spawn() {
    let el = document.createElement('div');
    el.className = 'floating-petal';
    // Posici√≥n inicial
    el.style.left = `${Math.random() * 90 + 2}%`;
    el.style.top = `${100 + Math.random() * 10}%`;
    el.style.opacity = 0.7 + Math.random() * 0.3;
    container.appendChild(el);

    // Animaci√≥n flotante
    const duration = 6000 + Math.random() * 4000;
    const drift = (Math.random() - 0.5) * 60;
    setTimeout(() => {
      el.style.transition = `transform ${duration}ms linear, opacity 1.2s`;
      el.style.transform = `translate(${drift}px, -110vh) scale(${0.8 + Math.random() * 0.6}) rotate(${Math.random() * 360}deg)`;
      el.style.opacity = 0.2;
    }, 30);

    // Eliminar despu√©s de animar
    setTimeout(() => {
      if (el.parentNode) el.parentNode.removeChild(el);
    }, duration + 2000);

    // Generar m√°s objetos
    if (count++ < 32) setTimeout(spawn, 350 + Math.random() * 500);
    else setTimeout(spawn, 1200 + Math.random() * 1200);
  }
  spawn();
}

function showCountdown() {
  const container = document.getElementById('countdown');
  
  // Fecha de inicio: 23 de febrero de 2025 a las 3:30 PM
  const startDate = new Date('2025-02-23T15:30:00');  // Fecha y hora de inicio

  function update() {
    const now = new Date();  // Hora actual
    let diff = now - startDate;  // Diferencia de tiempo entre ahora y la fecha de inicio

    // Si la fecha de inicio es en el pasado, mostramos el tiempo transcurrido
    let days = Math.floor(diff / (1000 * 60 * 60 * 24));  // D√≠as transcurridos
    let hours = Math.floor((diff / (1000 * 60 * 60)) % 24);  // Horas transcurridas
    let minutes = Math.floor((diff / (1000 * 60)) % 60);  // Minutos transcurridos
    let seconds = Math.floor((diff / 1000) % 60);  // Segundos transcurridos

    // Actualiza el contenido del contenedor con el tiempo transcurrido
    container.innerHTML =
      `Llevamos juntos: <b>${days}d ${hours}h ${minutes}m ${seconds}s</b>`;
    
    // Hace visible el contenedor (en caso de que tuviera alguna animaci√≥n o estilo)
    container.classList.add('visible');
  }

  update();  // Ejecuta inmediatamente al cargar la p√°gina
  setInterval(update, 1000);  // Actualiza cada segundo
}

//########################################INICIO AUTOMATICO DE LA CANCION AL QUITAR LA PANTALLA DE INICIO########################################

let musicInitialized = false; // Bandera para asegurar que la m√∫sica se inicializa solo una vez

// --- M√∫sica de fondo ---
function playBackgroundMusic() {
  if (musicInitialized) return; // Si ya se inicializ√≥, no hacer nada m√°s
  musicInitialized = true;

  const audio = document.getElementById('bg-music');
  if (!audio) return;

  // --- Opci√≥n archivo local por par√°metro 'musica' ---
  let musicaParam = getURLParam('musica');
  if (musicaParam) {
    // Decodifica y previene rutas maliciosas
    musicaParam = decodeURIComponent(musicaParam).replace(/[^\w\d .\-]/g, '');
    audio.src = 'Music/' + musicaParam;
  }

  // --- Opci√≥n YouTube (solo mensaje de ayuda) ---
  let youtubeParam = getURLParam('youtube');
  if (youtubeParam) {
    // Muestra mensaje de ayuda para descargar el audio
    let helpMsg = document.getElementById('yt-help-msg');
    if (!helpMsg) {
      helpMsg = document.createElement('div');
      helpMsg.id = 'yt-help-msg';
      helpMsg.style.position = 'fixed';
      helpMsg.style.right = '18px';
      helpMsg.style.bottom = '180px';
      helpMsg.style.background = 'rgba(255,255,255,0.95)';
      helpMsg.style.color = '#e60026';
      helpMsg.style.padding = '10px 16px';
      helpMsg.style.borderRadius = '12px';
      helpMsg.style.boxShadow = '0 2px 8px #e6002633';
      helpMsg.style.fontSize = '1.05em';
      helpMsg.style.zIndex = 100;
      helpMsg.innerHTML = 'Para usar m√∫sica de YouTube, descarga el audio (por ejemplo, usando y2mate, 4K Video Downloader, etc.), col√≥calo en la carpeta <b>Music</b> y usa la URL as√≠:<br><br><code>?musica=nombre.mp3</code>';
      document.body.appendChild(helpMsg);
      setTimeout(() => { if (helpMsg) helpMsg.remove(); }, 15000);
    }
  }

  let btn = document.getElementById('music-btn');
  if (!btn) {
    btn = document.createElement('button');
    btn.id = 'music-btn'; // El texto se establecer√° despu√©s del intento de play
    btn.style.position = 'fixed';
    btn.style.bottom = '18px';
    btn.style.right = '18px';
    btn.style.zIndex = 99;
    btn.style.background = 'rgba(255,255,255,0.85)';
    btn.style.border = 'none';
    btn.style.borderRadius = '24px';
    btn.style.padding = '10px 18px';
    btn.style.fontSize = '1.1em';
    btn.style.cursor = 'pointer';
    document.body.appendChild(btn);
  }

  // Estado inicial del bot√≥n antes de intentar reproducir
  if (btn && audio.paused) btn.textContent = '‚ñ∂Ô∏è M√∫sica';

  audio.volume = 0.7;
  audio.loop = true;

  let listenersAttached = false;

  // Funci√≥n para intentar reproducir y actualizar el bot√≥n
  const tryPlayAudioAndUpdateButton = () => {
    if (audio.paused) {
      audio.play().then(() => {
        if (btn) btn.textContent = 'üîä M√∫sica';
        removeGeneralEventListeners(); // Usar el nombre correcto de la funci√≥n
      }).catch(() => {
        if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
      });
    } else {
      // Si ya est√° sonando, asegurarse de que los listeners se hayan ido.
      if (btn) btn.textContent = 'üîä M√∫sica'; // Asegurar que el bot√≥n refleje el estado
      removeGeneralEventListeners(); // Usar el nombre correcto de la funci√≥n
    }
  };

  // Manejador para la primera interacci√≥n general del usuario (click, touch, scroll)
  const handleGeneralInteraction = (event) => {
    const target = event.target;
    const treeContainer = document.getElementById('tree-container'); // El div que contiene el SVG
    const dedicationTextEl = document.getElementById('dedication-text');

    // 1. Ignorar si el evento es en el bot√≥n de m√∫sica
    if (event && btn && (event.target === btn || btn.contains(event.target))) {
      return;
    }

    // 2. Condici√≥n para touchmove (ignorar si es un solo dedo deslizando sin ser scroll)
    if (event.type === 'touchmove' && (!event.touches || event.touches.length < 2)) {
        return;
    }

    // 3. Determinar si la interacci√≥n es v√°lida para iniciar m√∫sica
    let interactionShouldAttemptPlay = false;
    if (event.type === 'scroll') { // Scroll en la ventana
        interactionShouldAttemptPlay = true;
    } else if (event.type === 'click' || event.type === 'touchstart' || (event.type === 'touchmove' && event.touches && event.touches.length >=2) ) {
        // Para click, touchstart, o zoom (touchmove con >=2 dedos)
        if ((treeContainer && treeContainer.contains(target)) || // Dentro del SVG/su contenedor
            (dedicationTextEl && dedicationTextEl.contains(target)) || // Dentro de la dedicatoria
            target === document.body || target === document.documentElement) { // Clic/toque directo en body/html (fondo)
            interactionShouldAttemptPlay = true;
        }
    }

    if (!interactionShouldAttemptPlay) {
        return;
    }

    // Si es una interacci√≥n v√°lida:
    if (audio.paused) {
      audio.play().then(() => {
        if (btn) btn.textContent = 'üîä M√∫sica';
        removeGeneralEventListeners(); 
      }).catch(() => {
        if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
        removeGeneralEventListeners(); // Quitar listeners incluso si este intento falla, para que solo el bot√≥n quede.
      });
    } else {
      removeGeneralEventListeners();
    }
  };

  const eventListenersConfig = [
    { target: document, type: 'click', handler: handleGeneralInteraction },
    { target: document, type: 'touchstart', handler: handleGeneralInteraction, options: { passive: true } },
    { target: window, type: 'scroll', handler: handleGeneralInteraction, options: { passive: true } },
    { target: document, type: 'touchmove', handler: handleGeneralInteraction, options: { passive: true } },
  ];

  const addGeneralEventListeners = () => {
    if (listenersAttached) return;
    eventListenersConfig.forEach(listener => {
      listener.target.addEventListener(listener.type, listener.handler, listener.options || false);
    });
    listenersAttached = true;
  };

  // Renombrar para claridad, ya que se usa arriba.
  const removeGeneralEventListeners = () => {
    eventListenersConfig.forEach(listener => {
      listener.target.removeEventListener(listener.type, listener.handler, listener.options || false);
    });
    listenersAttached = false;
  };

  // Intentar reproducir inmediatamente (autoplay)
  audio.play().then(() => {
    // Autoplay fue "exitoso" seg√∫n el navegador (la promesa se resolvi√≥)
    if (btn) btn.textContent = 'üîä M√∫sica';

    setTimeout(() => {
      if (audio.paused) {
        // Autoplay fall√≥ silenciosamente o el navegador lo paus√≥.
        if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica'; // Corregir el estado del bot√≥n
        addGeneralEventListeners();
      }
    }, 100); // Peque√±o delay para verificar el estado real

  }).catch(() => {
    // Autoplay fall√≥.
    if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
    // Adjuntar listeners para la primera interacci√≥n del usuario si el autoplay falla.
    addGeneralEventListeners();
  });

  // L√≥gica del bot√≥n de m√∫sica
  if (btn) {
    btn.onclick = () => {
      if (audio.paused) {
        audio.play().then(() => { // El bot√≥n tambi√©n usa la misma l√≥gica de reproducci√≥n y limpieza
          if (btn) btn.textContent = 'üîä M√∫sica';
          removeGeneralEventListeners();
        }).catch(() => {
          if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
        });
      } else {
        audio.pause();
        btn.textContent = 'üîà M√∫sica';
      }
    };
  }
}

// ===============================
// CONFIGURACI√ìN INICIAL
// ===============================

const orientationWarning = document.getElementById('orientation-warning');
const orientationVideo = document.getElementById('orientacionVideo');
const body = document.body;
const musica = document.getElementById('bg-music');

let musicaPausadaPorOrientacion = false;
let animacionesPausadas = false;
let escrituraActiva = false;
let intervaloEscritura = null;
let contenidoEscritura = "";
let indiceEscritura = 0;

const elementoTexto = document.getElementById("dedicatoria"); // Ajusta si tu ID es otro

// ===============================
// ESCRITURA TIPO M√ÅQUINA
// ===============================

function iniciarEscritura(textoCompleto) {
  contenidoEscritura = textoCompleto;
  indiceEscritura = 0;
  escrituraActiva = true;
  elementoTexto.innerHTML = "";

  intervaloEscritura = setInterval(() => {
    if (indiceEscritura < contenidoEscritura.length && !animacionesPausadas) {
      elementoTexto.innerHTML += contenidoEscritura.charAt(indiceEscritura);
      indiceEscritura++;
    } else {
      clearInterval(intervaloEscritura);
      escrituraActiva = false;
    }
  }, 100);
}

// Llama esta funci√≥n despu√©s de mostrar la carta, por ejemplo:
// iniciarEscritura("Querida mam√°, gracias por todo tu amor...");


// ===============================
// PAUSA GENERAL POR ORIENTACI√ìN
// ===============================

function pausarTodoPorOrientacion() {
  orientationWarning.style.display = 'flex';
  body.classList.add('pausar-animaciones');

  // Pausar m√∫sica
  if (musica && !musica.paused) {
    musica.pause();
    musicaPausadaPorOrientacion = true;
  }

  // Pausar escritura
  animacionesPausadas = true;

  // Detener animaciones con estilo
  document.querySelectorAll("*").forEach(el => {
    el.style.animationPlayState = "paused";
    el.style.transition = "none";
  });

  // Evitar interacci√≥n
  document.body.style.pointerEvents = 'none';
}

// ===============================
// REANUDAR AL VOLVER A HORIZONTAL
// ===============================

function reanudarTodoPorOrientacion() {
  orientationWarning.style.display = 'none';
  body.classList.remove('pausar-animaciones');

  // Restaurar interacci√≥n
  document.body.style.pointerEvents = 'auto';

  // Reanudar m√∫sica si estaba pausada por orientaci√≥n
  if (musicaPausadaPorOrientacion && musica) {
    try {
      musica.play();
    } catch (e) {
      console.warn("La m√∫sica no se pudo reproducir autom√°ticamente:", e);
    }
    musicaPausadaPorOrientacion = false;
  }

  // Reanudar escritura
  animacionesPausadas = false;

  if (escrituraActiva && intervaloEscritura === null) {
    iniciarEscritura(contenidoEscritura);
  }

  // Restaurar animaciones
  document.querySelectorAll("*").forEach(el => {
    el.style.animationPlayState = "running";
    el.style.transition = "";
  });
}

// ===============================
// VERIFICAR ORIENTACI√ìN
// ===============================

function verificarOrientacion() {
  const esVertical = window.innerHeight > window.innerWidth;

  if (esVertical) {
    pausarTodoPorOrientacion();
  } else {
    reanudarTodoPorOrientacion();
  }
}

// ===============================
// EVENTOS
// ===============================

window.addEventListener("load", verificarOrientacion);
window.addEventListener("resize", verificarOrientacion);
window.addEventListener("orientationchange", verificarOrientacion);



//########################################Codigo original de respaldo########################################

// let musicInitialized = false; // Bandera para asegurar que la m√∫sica se inicializa solo una vez

// // --- M√∫sica de fondo ---
// function playBackgroundMusic() {
//   if (musicInitialized) return; // Si ya se inicializ√≥, no hacer nada m√°s
//   musicInitialized = true;

//   const audio = document.getElementById('bg-music');
//   if (!audio) return;


//   // --- Opci√≥n archivo local por par√°metro 'musica' ---
//   let musicaParam = getURLParam('musica');
//   if (musicaParam) {
//     // Decodifica y previene rutas maliciosas
//     musicaParam = decodeURIComponent(musicaParam).replace(/[^\w\d .\-]/g, '');
//     audio.src = 'Music/' + musicaParam;
//   } else {
//   }

//   // --- Opci√≥n YouTube (solo mensaje de ayuda) ---
//   let youtubeParam = getURLParam('youtube');
//   if (youtubeParam) {
//     // Muestra mensaje de ayuda para descargar el audio
//     let helpMsg = document.getElementById('yt-help-msg');
//     if (!helpMsg) {
//       helpMsg = document.createElement('div');
//       helpMsg.id = 'yt-help-msg';
//       helpMsg.style.position = 'fixed';
//       helpMsg.style.right = '18px';
//       helpMsg.style.bottom = '180px';
//       helpMsg.style.background = 'rgba(255,255,255,0.95)';
//       helpMsg.style.color = '#e60026';
//       helpMsg.style.padding = '10px 16px';
//       helpMsg.style.borderRadius = '12px';
//       helpMsg.style.boxShadow = '0 2px 8px #e6002633';
//       helpMsg.style.fontSize = '1.05em';
//       helpMsg.style.zIndex = 100;
//       helpMsg.innerHTML = 'Para usar m√∫sica de YouTube, descarga el audio (por ejemplo, usando y2mate, 4K Video Downloader, etc.), col√≥calo en la carpeta <b>Music</b> y usa la URL as√≠:<br><br><code>?musica=nombre.mp3</code>';
//       document.body.appendChild(helpMsg);
//       setTimeout(() => { if(helpMsg) helpMsg.remove(); }, 15000);
//     }
//   }

//   let btn = document.getElementById('music-btn');
//   if (!btn) {
//     btn = document.createElement('button');
//     btn.id = 'music-btn'; // El texto se establecer√° despu√©s del intento de play
//     btn.style.position = 'fixed';
//     btn.style.bottom = '18px';
//     btn.style.right = '18px';
//     btn.style.zIndex = 99;
//     btn.style.background = 'rgba(255,255,255,0.85)';
//     btn.style.border = 'none';
//     btn.style.borderRadius = '24px';
//     btn.style.padding = '10px 18px';
//     btn.style.fontSize = '1.1em';
//     btn.style.cursor = 'pointer';
//     document.body.appendChild(btn);
//   }
//   // Estado inicial del bot√≥n antes de intentar reproducir
//   if (btn && audio.paused) btn.textContent = '‚ñ∂Ô∏è M√∫sica';

//   audio.volume = 0.7;
//   audio.loop = true;

//   const removeGeneralInteractionListeners = () => {
//     eventListenersConfig.forEach(listener => {
//       listener.target.removeEventListener(listener.type, listener.handler, listener.options || false);
//     });
//     listenersAttached = false;
//   };
//   let listenersAttached = false;

//   // Funci√≥n para intentar reproducir y actualizar el bot√≥n
//   const tryPlayAudioAndUpdateButton = () => {
//     if (audio.paused) {
//       audio.play().then(() => {
//         if (btn) btn.textContent = 'üîä M√∫sica';
//         removeGeneralEventListeners(); // Usar el nombre correcto de la funci√≥n
//       }).catch(() => {
//         if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
//       });
//     } else {
//       // Si ya est√° sonando, asegurarse de que los listeners se hayan ido.
//       if (btn) btn.textContent = 'üîä M√∫sica'; // Asegurar que el bot√≥n refleje el estado
//       removeGeneralEventListeners(); // Usar el nombre correcto de la funci√≥n
//     }
//   };

//   // Manejador para la primera interacci√≥n general del usuario (click, touch, scroll)
//   const handleGeneralInteraction = (event) => {
//     const target = event.target;
//     const treeContainer = document.getElementById('tree-container'); // El div que contiene el SVG
//     const dedicationTextEl = document.getElementById('dedication-text');

//     // 1. Ignorar si el evento es en el bot√≥n de m√∫sica
//     if (event && btn && (event.target === btn || btn.contains(event.target))) {
//       return;
//     }

//     // 2. Condici√≥n para touchmove (ignorar si es un solo dedo deslizando sin ser scroll)
//     if (event.type === 'touchmove' && (!event.touches || event.touches.length < 2)) {
//         return;
//     }

//     // 3. Determinar si la interacci√≥n es v√°lida para iniciar m√∫sica
//     let interactionShouldAttemptPlay = false;
//     if (event.type === 'scroll') { // Scroll en la ventana
//         interactionShouldAttemptPlay = true;
//     } else if (event.type === 'click' || event.type === 'touchstart' || (event.type === 'touchmove' && event.touches && event.touches.length >=2) ) {
//         // Para click, touchstart, o zoom (touchmove con >=2 dedos)
//         if ((treeContainer && treeContainer.contains(target)) || // Dentro del SVG/su contenedor
//             (dedicationTextEl && dedicationTextEl.contains(target)) || // Dentro de la dedicatoria
//             target === document.body || target === document.documentElement) { // Clic/toque directo en body/html (fondo)
//             interactionShouldAttemptPlay = true;
//         }
//     }
    
//     if (!interactionShouldAttemptPlay) {
//         return;
//     }

//     // Si es una interacci√≥n v√°lida:
//     if (audio.paused) {
//       audio.play().then(() => {
//         if (btn) btn.textContent = 'üîä M√∫sica';
//         removeGeneralEventListeners(); 
//       }).catch(() => {
//         if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
//         removeGeneralEventListeners(); // Quitar listeners incluso si este intento falla, para que solo el bot√≥n quede.
//       });
//     } else {
//       removeGeneralEventListeners();
//     }
//   };

//   const eventListenersConfig = [
//     { target: document, type: 'click', handler: handleGeneralInteraction },
//     { target: document, type: 'touchstart', handler: handleGeneralInteraction, options: { passive: true } },
//     { target: window, type: 'scroll', handler: handleGeneralInteraction, options: { passive: true } },
//     { target: document, type: 'touchmove', handler: handleGeneralInteraction, options: { passive: true } },
//   ];

//   const addGeneralEventListeners = () => {
//     if (listenersAttached) return;
//     eventListenersConfig.forEach(listener => {
//       listener.target.addEventListener(listener.type, listener.handler, listener.options || false);
//     });
//     listenersAttached = true;
//   };

//   // Renombrar para claridad, ya que se usa arriba.
//   const removeGeneralEventListeners = removeGeneralInteractionListeners;

//   // Intentar reproducir inmediatamente (autoplay)
//   audio.play().then(() => {
//     // Autoplay fue "exitoso" seg√∫n el navegador (la promesa se resolvi√≥)
//     if (btn) btn.textContent = 'üîä M√∫sica';


//     setTimeout(() => {
//       if (audio.paused) {
//         // Autoplay fall√≥ silenciosamente o el navegador lo paus√≥.
//         if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica'; // Corregir el estado del bot√≥n
//         addGeneralEventListeners();
//       } else {
//       }
//     }, 100); // Peque√±o delay para verificar el estado real

//   }).catch(() => {
//     // Autoplay fall√≥.
//     if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
//     // Adjuntar listeners para la primera interacci√≥n del usuario si el autoplay falla.
//     addGeneralEventListeners();
//   });

//   // L√≥gica del bot√≥n de m√∫sica
//   if (btn) {
//     btn.onclick = () => {
//       if (audio.paused) {
//         audio.play().then(() => { // El bot√≥n tambi√©n usa la misma l√≥gica de reproducci√≥n y limpieza
//           if (btn) btn.textContent = 'üîä M√∫sica';
//           removeGeneralEventListeners();
//         }).catch(() => {
//           if (btn) btn.textContent = '‚ñ∂Ô∏è M√∫sica';
//         });
//       } else {
//         audio.pause();
//         btn.textContent = 'üîà M√∫sica';
//       }
//     };
//   }
// }